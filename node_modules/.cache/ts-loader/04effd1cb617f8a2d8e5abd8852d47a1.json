{"remainingRequest":"/Users/repo/musixlyrics/node_modules/babel-loader/lib/index.js!/Users/repo/musixlyrics/node_modules/ts-loader/index.js??ref--13-2!/Users/repo/musixlyrics/src/services/music-service.ts","dependencies":[{"path":"/Users/repo/musixlyrics/src/services/music-service.ts","mtime":1655128572000},{"path":"/Users/repo/musixlyrics/node_modules/cache-loader/dist/cjs.js","mtime":1656850731147},{"path":"/Users/repo/musixlyrics/node_modules/babel-loader/lib/index.js","mtime":1656850731447},{"path":"/Users/repo/musixlyrics/node_modules/ts-loader/index.js","mtime":1656850731468}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _defineProperty from \"/Users/repo/musixlyrics/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.last-index-of\";\nimport \"core-js/modules/es6.string.ends-with\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.string.trim\";\nimport _classCallCheck from \"/Users/repo/musixlyrics/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/repo/musixlyrics/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as tslib_1 from \"tslib\";\n\nvar _a;\n\nimport { Artist, Song, SongLyrics } from '@/domain';\nimport { AxiosStatic } from 'axios';\nimport { MusixMatchApiV1, musixMatchApiV1ArtistMessageValidator, MusixMatchApiV1Formats, MusixMatchApiV1Params, musixMatchApiV1SongLyricsMessageValidator, musixMatchApiV1SongMessageValidator } from '@/services/musixmatch-api';\nimport { map, retry } from 'rxjs/operators';\nimport { API_KEY } from '@/api-key';\nimport { observableAxiosGetRequest } from '@/services/axios-utils';\nimport { PathReporter } from 'io-ts/lib/PathReporter';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '@/ioc/types';\n\nvar MusicServiceImpl =\n/*#__PURE__*/\nfunction () {\n  function MusicServiceImpl(baseUrl, axios) {\n    _classCallCheck(this, MusicServiceImpl);\n\n    this.axios = axios;\n\n    if (!baseUrl || baseUrl.trim().length === 0) {\n      throw new Error('The base URL must be provided!');\n    } else if (!baseUrl.toLocaleLowerCase().startsWith('https://') && !baseUrl.toLocaleLowerCase().startsWith('http://')) {\n      throw new Error('The URL looks invalid. It should start with \\'http://\\' or https://\\'');\n    }\n\n    var cleanBaseUrl = baseUrl.trim();\n\n    if (cleanBaseUrl.endsWith('/')) {\n      cleanBaseUrl = cleanBaseUrl.substr(0, cleanBaseUrl.lastIndexOf('/'));\n    }\n\n    this.musixMatchApiBaseUrl = \"\".concat(cleanBaseUrl, \"/\").concat(MusixMatchApiV1.VERSION, \"/\");\n    console.log(\"Music service initialized.\\nMusixMatch API URL: [\".concat(this.musixMatchApiBaseUrl, \"]\"));\n  }\n\n  _createClass(MusicServiceImpl, [{\n    key: \"findArtists\",\n    value: function findArtists(name) {\n      var _requestParams;\n\n      if (!name || name.trim() === '') {\n        throw new Error('The name is mandatory and cannot be empty');\n      }\n\n      var requestURL = \"\".concat(this.musixMatchApiBaseUrl).concat(MusixMatchApiV1.ARTISTS);\n      var requestParams = (_requestParams = {}, _defineProperty(_requestParams, MusixMatchApiV1Params.API_KEY, API_KEY), _defineProperty(_requestParams, MusixMatchApiV1Params.FORMAT, MusixMatchApiV1Formats.JSON), _defineProperty(_requestParams, MusixMatchApiV1Params.PAGE_SIZE, 100), _defineProperty(_requestParams, MusixMatchApiV1Params.ARTIST, name), _requestParams); // console.log('Request URL: ', requestURL);\n      // console.log('Request params: ', requestParams);\n\n      return observableAxiosGetRequest(requestURL, {\n        params: requestParams\n      }, this.axios).pipe(retry(3), map(function (axiosResponse) {\n        var jsonContent = axiosResponse.data; // Axios automatically converts to JSON by default\n        // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n        var validationResult = musixMatchApiV1ArtistMessageValidator.decode(jsonContent);\n\n        if (validationResult.isLeft()) {\n          throw PathReporter.report(validationResult).join('\\n');\n        }\n\n        var validatedResponse = validationResult.value;\n        return validatedResponse.message.body.artist_list;\n      }), map(function (rawArtistsList) {\n        // console.log('Raw artists list: ', rawArtistsList);\n        var retVal = [];\n        rawArtistsList.forEach(function (artist) {\n          retVal.push(new Artist(\"\".concat(artist.artist.artist_id), artist.artist.artist_name));\n        });\n        return retVal;\n      }));\n    }\n  }, {\n    key: \"findSongs\",\n    value: function findSongs(name) {\n      var _requestParams2;\n\n      if (!name || name.trim() === '') {\n        throw new Error('The name is mandatory and cannot be empty');\n      }\n\n      var requestURL = \"\".concat(this.musixMatchApiBaseUrl).concat(MusixMatchApiV1.SONGS);\n      var requestParams = (_requestParams2 = {}, _defineProperty(_requestParams2, MusixMatchApiV1Params.API_KEY, API_KEY), _defineProperty(_requestParams2, MusixMatchApiV1Params.FORMAT, MusixMatchApiV1Formats.JSON), _defineProperty(_requestParams2, MusixMatchApiV1Params.PAGE_SIZE, 100), _defineProperty(_requestParams2, MusixMatchApiV1Params.TRACK, name), _requestParams2); // console.log('Request URL: ', requestURL);\n      // console.log('Request params: ', requestParams);\n\n      return observableAxiosGetRequest(requestURL, {\n        params: requestParams\n      }, this.axios).pipe(retry(3), map(function (axiosResponse) {\n        var jsonContent = axiosResponse.data; // Axios automatically converts to JSON by default\n        // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n        var validationResult = musixMatchApiV1SongMessageValidator.decode(jsonContent);\n\n        if (validationResult.isLeft()) {\n          throw PathReporter.report(validationResult).join('\\n');\n        }\n\n        var validatedResponse = validationResult.value;\n        return validatedResponse.message.body.track_list;\n      }), map(function (rawSongsList) {\n        // console.log('Raw songs list: ', rawSongsList);\n        var retVal = [];\n        rawSongsList.forEach(function (song) {\n          var songGenres = [];\n          song.track.primary_genres.music_genre_list.forEach(function (genre) {\n            songGenres.push(genre.music_genre.music_genre_name);\n          });\n          retVal.push(new Song(\"\".concat(song.track.track_id), \"\".concat(song.track.artist_id), song.track.track_name, // small trick to convert to boolean\n          !!song.track.has_lyrics, songGenres));\n        });\n        return retVal;\n      }));\n    }\n  }, {\n    key: \"findLyrics\",\n    value: function findLyrics(song) {\n      var _requestParams3;\n\n      if (!song) {\n        throw new Error('A song must be provided to fetch its lyrics');\n      }\n\n      if (!song.hasLyrics) {\n        throw new Error(\"If the song has no lyrics, it doesn't make sense to try and get those\");\n      }\n\n      var requestURL = \"\".concat(this.musixMatchApiBaseUrl).concat(MusixMatchApiV1.LYRICS);\n      var requestParams = (_requestParams3 = {}, _defineProperty(_requestParams3, MusixMatchApiV1Params.API_KEY, API_KEY), _defineProperty(_requestParams3, MusixMatchApiV1Params.FORMAT, MusixMatchApiV1Formats.JSON), _defineProperty(_requestParams3, MusixMatchApiV1Params.PAGE_SIZE, 100), _defineProperty(_requestParams3, MusixMatchApiV1Params.TRACK_ID, song.id), _requestParams3); // console.log('Request URL: ', requestURL);\n      // console.log('Request params: ', requestParams);\n\n      return observableAxiosGetRequest(requestURL, {\n        params: requestParams\n      }, this.axios).pipe(retry(3), map(function (axiosResponse) {\n        var jsonContent = axiosResponse.data; // Axios automatically converts to JSON by default\n        // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n        var validationResult = musixMatchApiV1SongLyricsMessageValidator.decode(jsonContent);\n\n        if (validationResult.isLeft()) {\n          throw PathReporter.report(validationResult).join('\\n');\n        }\n\n        var validatedResponse = validationResult.value;\n        return validatedResponse.message.body.lyrics;\n      }), map(function (rawSongLyrics) {\n        var retVal = new SongLyrics(\"\".concat(rawSongLyrics.lyrics_id), rawSongLyrics.lyrics_body, !!rawSongLyrics.explicit, rawSongLyrics.lyrics_copyright);\n        return retVal;\n      }));\n    }\n  }]);\n\n  return MusicServiceImpl;\n}();\n\nMusicServiceImpl = tslib_1.__decorate([injectable(), tslib_1.__param(0, inject(TYPES.MUSIXMATCH_BASE_URL)), tslib_1.__param(1, inject(TYPES.AXIOS_INSTANCE)), tslib_1.__metadata(\"design:paramtypes\", [String, typeof (_a = typeof AxiosStatic !== \"undefined\" && AxiosStatic) === \"function\" ? _a : Object])], MusicServiceImpl);\nexport { MusicServiceImpl };",{"version":3,"sources":["/Users/repo/musixlyrics/src/services/music-service.ts"],"names":[],"mappings":"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","sourcesContent":["import {MusicService} from '@/services/music-service.intf';\nimport {Observable} from 'rxjs';\nimport {Artist, Song, SongLyrics} from '@/domain';\nimport {AxiosResponse, AxiosStatic} from 'axios';\nimport {\n  MusixMatchApiV1,\n  MusixMatchApiV1ArtistList,\n  MusixMatchApiV1ArtistMessage,\n  musixMatchApiV1ArtistMessageValidator,\n  MusixMatchApiV1Formats,\n  MusixMatchApiV1Params,\n  MusixMatchApiV1SongList,\n  MusixMatchApiV1SongLyrics,\n  MusixMatchApiV1SongLyricsMessage,\n  musixMatchApiV1SongLyricsMessageValidator,\n  MusixMatchApiV1SongMessage,\n  musixMatchApiV1SongMessageValidator,\n} from '@/services/musixmatch-api';\nimport {map, retry} from 'rxjs/operators';\nimport {API_KEY} from '@/api-key';\nimport {observableAxiosGetRequest} from '@/services/axios-utils';\nimport {PathReporter} from 'io-ts/lib/PathReporter';\nimport {inject, injectable} from 'inversify';\nimport {TYPES} from '@/ioc/types';\n\n@injectable()\nexport class MusicServiceImpl implements MusicService {\n\n  private readonly musixMatchApiBaseUrl: string;\n\n  constructor(\n    @inject(TYPES.MUSIXMATCH_BASE_URL) baseUrl: string,\n    @inject(TYPES.AXIOS_INSTANCE) private axios: AxiosStatic) {\n    if (!baseUrl || baseUrl.trim().length === 0) {\n      throw new Error('The base URL must be provided!');\n    } else if (!baseUrl.toLocaleLowerCase().startsWith('https://') && !baseUrl.toLocaleLowerCase().startsWith('http://')) {\n      throw new Error('The URL looks invalid. It should start with \\'http://\\' or https://\\'');\n    }\n\n    let cleanBaseUrl = baseUrl.trim();\n    if (cleanBaseUrl.endsWith('/')) {\n      cleanBaseUrl = cleanBaseUrl.substr(0, cleanBaseUrl.lastIndexOf('/'));\n    }\n\n    this.musixMatchApiBaseUrl =\n      `${cleanBaseUrl}/${MusixMatchApiV1.VERSION}/`;\n\n    console.log(`Music service initialized.\\nMusixMatch API URL: [${this.musixMatchApiBaseUrl}]`);\n  }\n\n  findArtists(name: string): Observable<Artist[]> {\n    if (!name || name.trim() === '') {\n      throw new Error('The name is mandatory and cannot be empty');\n    }\n\n    const requestURL = `${this.musixMatchApiBaseUrl}${MusixMatchApiV1.ARTISTS}`;\n    const requestParams: any = {\n      [MusixMatchApiV1Params.API_KEY]: API_KEY,\n      [MusixMatchApiV1Params.FORMAT]: MusixMatchApiV1Formats.JSON,\n      [MusixMatchApiV1Params.PAGE_SIZE]: 100,\n      [MusixMatchApiV1Params.ARTIST]: name,\n    };\n\n    // console.log('Request URL: ', requestURL);\n    // console.log('Request params: ', requestParams);\n\n    return observableAxiosGetRequest(requestURL, { params: requestParams }, this.axios)\n      .pipe(\n        retry(3),\n        map((axiosResponse: AxiosResponse) => {\n          const jsonContent: unknown = axiosResponse.data; // Axios automatically converts to JSON by default\n\n          // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n          const validationResult = musixMatchApiV1ArtistMessageValidator.decode(jsonContent);\n          if (validationResult.isLeft()) {\n            throw PathReporter.report(validationResult).join('\\n');\n          }\n\n          const validatedResponse = validationResult.value as MusixMatchApiV1ArtistMessage;\n\n          return validatedResponse.message.body.artist_list;\n        }),\n        map((rawArtistsList: MusixMatchApiV1ArtistList) => {\n          // console.log('Raw artists list: ', rawArtistsList);\n          const retVal: Artist[] = [];\n\n          rawArtistsList.forEach((artist) => {\n            retVal.push(new Artist(\n              `${artist.artist.artist_id}`,\n              artist.artist.artist_name,\n            ));\n          });\n\n          return retVal;\n        }),\n      );\n  }\n\n  findSongs(name: string): Observable<Song[]> {\n    if (!name || name.trim() === '') {\n      throw new Error('The name is mandatory and cannot be empty');\n    }\n\n    const requestURL = `${this.musixMatchApiBaseUrl}${MusixMatchApiV1.SONGS}`;\n    const requestParams: any = {\n      [MusixMatchApiV1Params.API_KEY]: API_KEY,\n      [MusixMatchApiV1Params.FORMAT]: MusixMatchApiV1Formats.JSON,\n      [MusixMatchApiV1Params.PAGE_SIZE]: 100,\n      [MusixMatchApiV1Params.TRACK]: name,\n    };\n\n    // console.log('Request URL: ', requestURL);\n    // console.log('Request params: ', requestParams);\n\n    return observableAxiosGetRequest(requestURL, { params: requestParams }, this.axios)\n      .pipe(\n        retry(3),\n        map((axiosResponse: AxiosResponse) => {\n          const jsonContent: unknown = axiosResponse.data; // Axios automatically converts to JSON by default\n\n          // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n          const validationResult = musixMatchApiV1SongMessageValidator.decode(jsonContent);\n          if (validationResult.isLeft()) {\n            throw PathReporter.report(validationResult).join('\\n');\n          }\n\n          const validatedResponse = validationResult.value as MusixMatchApiV1SongMessage;\n\n          return validatedResponse.message.body.track_list;\n        }),\n        map((rawSongsList: MusixMatchApiV1SongList) => {\n          // console.log('Raw songs list: ', rawSongsList);\n          const retVal: Song[] = [];\n\n          rawSongsList.forEach((song) => {\n            const songGenres: string[] = [];\n\n            song.track.primary_genres.music_genre_list.forEach((genre) => {\n              songGenres.push(genre.music_genre.music_genre_name);\n            });\n\n            retVal.push(new Song(\n              `${song.track.track_id}`,\n              `${song.track.artist_id}`,\n              song.track.track_name,\n              // small trick to convert to boolean\n              !!song.track.has_lyrics,\n              songGenres,\n            ));\n          });\n\n          return retVal;\n        }),\n      );\n  }\n\n  findLyrics(song: Song): Observable<SongLyrics> {\n    if (!song) {\n      throw new Error('A song must be provided to fetch its lyrics');\n    }\n\n    if (!song.hasLyrics) {\n      throw new Error(`If the song has no lyrics, it doesn't make sense to try and get those`);\n    }\n\n    const requestURL = `${this.musixMatchApiBaseUrl}${MusixMatchApiV1.LYRICS}`;\n    const requestParams: any = {\n      [MusixMatchApiV1Params.API_KEY]: API_KEY,\n      [MusixMatchApiV1Params.FORMAT]: MusixMatchApiV1Formats.JSON,\n      [MusixMatchApiV1Params.PAGE_SIZE]: 100,\n      [MusixMatchApiV1Params.TRACK_ID]: song.id,\n    };\n\n    // console.log('Request URL: ', requestURL);\n    // console.log('Request params: ', requestParams);\n\n    return observableAxiosGetRequest(requestURL, { params: requestParams }, this.axios)\n      .pipe(\n        retry(3),\n        map((axiosResponse: AxiosResponse) => {\n          const jsonContent: unknown = axiosResponse.data; // Axios automatically converts to JSON by default\n\n          // console.log(`Response JSON data: ${JSON.stringify(jsonContent)}`);\n\n          const validationResult = musixMatchApiV1SongLyricsMessageValidator.decode(jsonContent);\n          if (validationResult.isLeft()) {\n            throw PathReporter.report(validationResult).join('\\n');\n          }\n\n          const validatedResponse = validationResult.value as MusixMatchApiV1SongLyricsMessage;\n\n          return validatedResponse.message.body.lyrics;\n        }),\n        map((rawSongLyrics: MusixMatchApiV1SongLyrics) => {\n          const retVal: SongLyrics = new SongLyrics(\n            `${rawSongLyrics.lyrics_id}`,\n            rawSongLyrics.lyrics_body,\n            !!rawSongLyrics.explicit,\n            rawSongLyrics.lyrics_copyright,\n          );\n\n          return retVal;\n        }),\n      );\n  }\n}\n"],"sourceRoot":""}]}