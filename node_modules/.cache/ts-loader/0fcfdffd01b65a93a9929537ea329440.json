{"remainingRequest":"/Users/repo/musixlyrics/node_modules/babel-loader/lib/index.js!/Users/repo/musixlyrics/node_modules/ts-loader/index.js??ref--13-2!/Users/repo/musixlyrics/src/services/axios-utils.ts","dependencies":[{"path":"/Users/repo/musixlyrics/src/services/axios-utils.ts","mtime":1655128572000},{"path":"/Users/repo/musixlyrics/node_modules/cache-loader/dist/cjs.js","mtime":1656850731147},{"path":"/Users/repo/musixlyrics/node_modules/babel-loader/lib/index.js","mtime":1656850731447},{"path":"/Users/repo/musixlyrics/node_modules/ts-loader/index.js","mtime":1656850731468}],"contextDependencies":[],"result":["import { defer, from } from 'rxjs';\n/**\n * Utility method that takes the necessary configuration for an Axios GET request and returns\n * a deferred Observable, that will only execute the HTTP request when there is a subscriber.\n *\n * The data type can be forced if needed, but it is safer not to assume too much here and validate instead!\n *\n * @param requestURL the target URL\n * @param requestConfig the request configuration\n * @param axios the Axios instance to use\n */\n\nexport var observableAxiosGetRequest = function observableAxiosGetRequest(requestURL, requestConfig, axios) {\n  // we defer the Promise creation using defer so that the request is\n  // only sent when there is a subscriber\n  return defer(function () {\n    return from(axios.get(requestURL, requestConfig));\n  });\n};",{"version":3,"sources":["/Users/repo/musixlyrics/src/services/axios-utils.ts"],"names":[],"mappings":"AACA,SAAQ,KAAR,EAAe,IAAf,QAAsC,MAAtC;AAEA;;;;;;;;;;;AAUA,OAAO,IAAM,yBAAyB,GACpC,SADW,yBACX,CACE,UADF,EAEE,aAFF,EAGE,KAHF,EAGsD;AACpD;AACA;AACA,SAAO,KAAK,CAAC,YAAgC;AAC3C,WAAO,IAAI,CAAC,KAAK,CAAC,GAAN,CAAa,UAAb,EAAyB,aAAzB,CAAD,CAAX;AACD,GAFW,CAAZ;AAGD,CAVI","sourcesContent":["import {AxiosRequestConfig, AxiosResponse, AxiosStatic} from 'axios';\nimport {defer, from, Observable} from 'rxjs';\n\n/**\n * Utility method that takes the necessary configuration for an Axios GET request and returns\n * a deferred Observable, that will only execute the HTTP request when there is a subscriber.\n *\n * The data type can be forced if needed, but it is safer not to assume too much here and validate instead!\n *\n * @param requestURL the target URL\n * @param requestConfig the request configuration\n * @param axios the Axios instance to use\n */\nexport const observableAxiosGetRequest =\n  <T = any>(\n    requestURL: string,\n    requestConfig: AxiosRequestConfig,\n    axios: AxiosStatic): Observable<AxiosResponse<T>> => {\n    // we defer the Promise creation using defer so that the request is\n    // only sent when there is a subscriber\n    return defer((): Observable<AxiosResponse> => {\n      return from(axios.get<T>(requestURL, requestConfig));\n    });\n  };\n"],"sourceRoot":""}]}